import React, { useEffect, useState } from "react";


export default function SpotifyBar () {
  const [profile, setProfile] = useState(null);
  const [accessToken, setAccessToken] = useState(null);
  const [currentlyPlaying, setCurrentlyPlaying] = useState(null);

  useEffect(() => {
    const url = new URL(window.location.href);
    // this is finding the access_token provided by spotify authentication, should be some long ass line of code returned in a url
    const token = url.searchParams.get("access_token");
    console.log(token);

    if (token) {
      setAccessToken(token);
      window.history.replaceState({}, document.title, "/");
      // this was recommended to clean up the browser url bar otherwise the token code generated by spotify is just sitting there
    }
  }, []);

  useEffect(() => {
    if (!accessToken) return;
    // if we don't have an access token then we try to fetch one from the spotify api, this is good for waiting 

    fetch("https://api.spotify.com/v1/me", {
      headers: { Authorization: `Bearer ${accessToken}` } // pass the token to spotify TODO: move this call to backend
    })
      .then(res => res.json())
      .then(data => setProfile(data)) // this updates the useState to profile using the new data which maneasn wwe can call it in the html below (e.g. profile.display_name)
      .catch(err => console.error("Failed to fetch profile", err));
  }, [accessToken]);

  const handleLogin = () => {
    window.location.href = "http://localhost:3000/api/auth/login"; // this is the path on server side 
  };

  const fetchCurrentlyPlaying = () => {
    if (!accessToken) return;

    fetch("https://api.spotify.com/v1/me/player/currently-playing", { // call to api to see what is playing TODO: move this call to backend
      headers: {
        Authorization: `Bearer ${accessToken}` // pass the token
      }
    })
      .then(res => {
        if (res.status === 204 || res.status === 202) { // check to see if track is being played
          setCurrentlyPlaying(null);
          return;
        }
        if (!res.ok) {
          throw new Error("Failed to fetch currently playing track");
        }
        return res.json();
      })
      .then(data => {
        if (data && data.item) {
          setCurrentlyPlaying(data);
        }
      })
      .catch(err => console.error("Failed to fetch currently playing", err));
  };
  if (!profile) {
    return <button onClick={handleLogin}>Login with Spotify</button>;
  }



  if (!profile) {
    // if there is no profile currently loaded then the div is only going to display the login to spotify button, which fires handleLogin, which redirects to the server auth/login path
    return <button onClick={handleLogin}>Login with Spotify</button>;
  }

  return (
    <div>
      <h2>Welcome, {profile.display_name}</h2>
      {profile.images?.[0]?.url && (
        <img src={profile.images[0].url} alt="Profile" width={100} />
      )}
      <p></p>
      <iframe src="https://open.spotify.com/embed/playlist/5bPnKYPCfR2k1wNYMUOk33?utm_source=generator"
        width="100%" height="352"
        allow="autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture" loading="lazy"></iframe>
      <button onClick={fetchCurrentlyPlaying} style={{ marginTop: "1rem" }}>
        Refresh Currently Playing
      </button>
      {currentlyPlaying && currentlyPlaying.item ? (
        <div style={{ marginTop: "1rem" }}>
          <h3>Currently Playing</h3>
          <p>
            <strong>{currentlyPlaying.item.name}</strong> by{" "}
            {currentlyPlaying.item.artists.map(artist => artist.name).join(", ")}
          </p>
          <img
            src={currentlyPlaying.item.album.images[0].url}
            alt="Album Art"
            width={100}
          />
        </div>
      ) : (
        <p style={{ marginTop: "1rem" }}>Nothing currently playing</p>
      )}
    </div>
  );
}
